#ifndef _PPU_H_
#define _PPU_H_
#include "../allegro.h"
#include <cstdint>

typedef struct
{
    uint8_t r, g, b;
} rgb_color;

class SNES;
class PPU {
  public:
    SNES *snes = nullptr;

    uint8_t  *vramb     = nullptr;
    uint16_t *vram      = nullptr;
    int       ppumask   = 0;
    uint32_t  wroteaddr = 0;
    int       hcount = 0, vcount = 0;
    int       twowrite       = 0;
    int       windowschanged = 0;
    int       spcskip        = 4;
    int       lastline       = 0;
    int       windowdisable  = 0;

    BITMAP *dasbuffer = NULL;
    BITMAP *b = NULL, *mainscr = NULL, *subscr = NULL, *otherscr = NULL, *sysb = NULL;

  public:
    uint32_t window[10][164]    = {};
    uint32_t bitlookup[2][4][4] = {}, masklookup[2][4] = {};
    uint16_t bitlookuph[2][4][4] = {}, masklookuph[2][4] = {};
    uint16_t pallookup[16][256] = {};
    uint32_t collookup[16]      = {};
    uint8_t  sprram[544]        = {};
    int      bgtype[8][4]       = {
                   {2, 3, 3, 3}, {4, 4, 2, 0}, {4, 4, 0, 0}, {8, 4, 0, 0}, {8, 2, 0, 0}, {5, 6, 0, 0}, {0, 0, 0, 0}, {7, 0, 0, 0},
    };
    int      draworder[16][12] = {{3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}, {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11},
                                  {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}, {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11},
                                  {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}, {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11},
                                  {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}, {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11},
                                  {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}, {3, 2, 8, 7, 9, 1, 0, 10, 5, 4, 11, 6},
                                  {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}, {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11},
                                  {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}, {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11},
                                  {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}, {3, 2, 8, 7, 6, 9, 1, 0, 10, 5, 4, 11}};
    uint16_t ylookup[4][64]    = {
           {0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0, 0x0E0, 0x100, 0x120, 0x140, 0x160, 0x180,
            0x1A0, 0x1C0, 0x1E0, 0x200, 0x220, 0x240, 0x260, 0x280, 0x2A0, 0x2C0, 0x2E0, 0x300, 0x320,
            0x340, 0x360, 0x380, 0x3A0, 0x3C0, 0x3E0, 0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0,
            0x0E0, 0x100, 0x120, 0x140, 0x160, 0x180, 0x1A0, 0x1C0, 0x1E0, 0x200, 0x220, 0x240, 0x260,
            0x280, 0x2A0, 0x2C0, 0x2E0, 0x300, 0x320, 0x340, 0x360, 0x380, 0x3A0, 0x3C0, 0x3E0},
           {0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0, 0x0E0, 0x100, 0x120, 0x140, 0x160, 0x180,
            0x1A0, 0x1C0, 0x1E0, 0x200, 0x220, 0x240, 0x260, 0x280, 0x2A0, 0x2C0, 0x2E0, 0x300, 0x320,
            0x340, 0x360, 0x380, 0x3A0, 0x3C0, 0x3E0, 0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0,
            0x0E0, 0x100, 0x120, 0x140, 0x160, 0x180, 0x1A0, 0x1C0, 0x1E0, 0x200, 0x220, 0x240, 0x260,
            0x280, 0x2A0, 0x2C0, 0x2E0, 0x300, 0x320, 0x340, 0x360, 0x380, 0x3A0, 0x3C0, 0x3E0},
           {0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0, 0x0E0, 0x100, 0x120, 0x140, 0x160, 0x180,
            0x1A0, 0x1C0, 0x1E0, 0x200, 0x220, 0x240, 0x260, 0x280, 0x2A0, 0x2C0, 0x2E0, 0x300, 0x320,
            0x340, 0x360, 0x380, 0x3A0, 0x3C0, 0x3E0, 0x400, 0x420, 0x440, 0x460, 0x480, 0x4A0, 0x4C0,
            0x4E0, 0x500, 0x520, 0x540, 0x560, 0x580, 0x5A0, 0x5C0, 0x5E0, 0x600, 0x620, 0x640, 0x660,
            0x680, 0x6A0, 0x6C0, 0x6E0, 0x700, 0x720, 0x740, 0x760, 0x780, 0x7A0, 0x7C0, 0x7E0},
           {0x000, 0x020, 0x040, 0x060, 0x080, 0x0A0, 0x0C0, 0x0E0, 0x100, 0x120, 0x140, 0x160, 0x180,
            0x1A0, 0x1C0, 0x1E0, 0x200, 0x220, 0x240, 0x260, 0x280, 0x2A0, 0x2C0, 0x2E0, 0x300, 0x320,
            0x340, 0x360, 0x380, 0x3A0, 0x3C0, 0x3E0, 0x800, 0x820, 0x840, 0x860, 0x880, 0x8A0, 0x8C0,
            0x8E0, 0x900, 0x920, 0x940, 0x960, 0x980, 0x9A0, 0x9C0, 0x9E0, 0xA00, 0xA20, 0xA40, 0xA60,
            0xA80, 0xAA0, 0xAC0, 0xAE0, 0xB00, 0xB20, 0xB40, 0xB60, 0xB80, 0xBA0, 0xBC0, 0xBE0}};
    uint16_t xlookup[2][64] = {
        {0x000, 0x001, 0x002, 0x003, 0x004, 0x005, 0x006, 0x007, 0x008, 0x009, 0x00A, 0x00B, 0x00C,
         0x00D, 0x00E, 0x00F, 0x010, 0x011, 0x012, 0x013, 0x014, 0x015, 0x016, 0x017, 0x018, 0x019,
         0x01A, 0x01B, 0x01C, 0x01D, 0x01E, 0x01F, 0x000, 0x001, 0x002, 0x003, 0x004, 0x005, 0x006,
         0x007, 0x008, 0x009, 0x00A, 0x00B, 0x00C, 0x00D, 0x00E, 0x00F, 0x010, 0x011, 0x012, 0x013,
         0x014, 0x015, 0x016, 0x017, 0x018, 0x019, 0x01A, 0x01B, 0x01C, 0x01D, 0x01E, 0x01F},
        {0x000, 0x001, 0x002, 0x003, 0x004, 0x005, 0x006, 0x007, 0x008, 0x009, 0x00A, 0x00B, 0x00C,
         0x00D, 0x00E, 0x00F, 0x010, 0x011, 0x012, 0x013, 0x014, 0x015, 0x016, 0x017, 0x018, 0x019,
         0x01A, 0x01B, 0x01C, 0x01D, 0x01E, 0x01F, 0x400, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406,
         0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40D, 0x40E, 0x40F, 0x410, 0x411, 0x412, 0x413,
         0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F},
    };
    int sprsize[8][2] = {{1, 2}, {1, 4}, {1, 8}, {2, 4}, {2, 8}, {4, 8}, {4, 8}, {4, 8}};

  public:
    uint8_t  screna   = 0;
    uint8_t  portctrl = 0;
    uint16_t vramaddr = 0;
    int      mode     = 0;
    uint8_t  main = 0, sub = 0;
    uint16_t palbuffer = 0;

    int      palindex = 0;
    int      ylatch   = 0;
    uint32_t matrixr  = 0;
    uint16_t m7a = 0, m7b = 0, m7c = 0, m7d = 0, m7x = 0, m7y = 0;
    uint8_t  m7sel      = 0;
    int      vinc       = 0;
    int      sprsizeidx = 0;
    int      spraddr    = 0;
    uint16_t sprbase    = 0;
    int      firstread  = 0;
    int      tilesize   = 0;
    uint32_t wramaddr   = 0;
    uint8_t  windena1 = 0, windena2, windena3 = 0;
    int      w1left = 0, w1right = 0, w2left = 0, w2right = 0;
    uint8_t  windlogic = 0, windlogic2 = 0;
    uint8_t  wmaskmain = 0, wmasksub = 0;
    uint16_t spraddrs = 0;
    uint8_t  cgadsub = 0, cgwsel = 0;
    uint16_t fixedcol    = 0;
    int      mosaic      = 0;
    uint16_t pri         = 0;
    int      prirotation = 0;

    uint16_t bg[4] = {}, chr[4] = {};
    int      size[4]    = {};
    int      xscroll[4] = {}, yscroll[4] = {};
    uint16_t pal[256] = {};

    rgb_color fixedc;

  public:
    PPU(SNES *_snes);

    uint16_t cgadd(uint32_t x, uint32_t y);
    uint16_t cgaddh(uint32_t x, uint32_t y);
    uint32_t cgsub(uint32_t x, uint32_t y);
    uint16_t cgsubh(uint32_t x, uint32_t y);

    void initppu();
    void resetppu();
    void recalcwindows();

    void     doblit();
    void     docolour(uint16_t *pw, uint16_t *pw2, uint16_t *pw3, uint16_t *pw4);
    void     drawline(int line);
    void     writeppu(uint16_t addr, uint8_t val);
    uint8_t  doskipper();
    uint8_t  readppu(uint16_t addr);
    uint16_t getvramaddr();
    void     drawchar(int tile, int x, int y, int col);
    void     window_logic(int windena, int windlogic, uint16_t *w, uint16_t *w2, uint16_t *w3);
};
#endif
